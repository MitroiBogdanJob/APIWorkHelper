using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ROTAKT.API.Data.DatabaseProduction;

[ApiController]
[Route("api/[controller]")]
public class InvoicePaymentsController : ControllerBase
{
    private readonly AppDbContextProduction _context;

    public InvoicePaymentsController(AppDbContextProduction context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<InvoicePayment>>> GetInvoicePayments([FromQuery] int page = 1, [FromQuery] int pageSize = 10)
    {
        try
        {
            if (page < 1 || pageSize < 0)
            {
                return BadRequest("Page number must be at least 1 and page size must be at least 0.");
            }

            var allInvoicePayments = await _context.InvoicePayments
                .FromSqlRaw("EXEC InvoicePaymentsApi_NoDateFilter")
                .ToListAsync();

            if (pageSize == 0)
            {
                return Ok(allInvoicePayments);
            }
            else
            {
                int offset = (page - 1) * pageSize;
                var pagedInvoicePayments = allInvoicePayments
                    .Skip(offset)
                    .Take(pageSize)
                    .ToList();

                return Ok(pagedInvoicePayments);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }
}
